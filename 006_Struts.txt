PROGRAMACIÓN WEB JAVA CAPÍTULO 4 STRUTS
STRUTS
En los capítulos anteriores aprendimos
a usar Servlets y JavaServer Pages
para construir aplicaciones web 
con Java como Lenguaje de Programación.
También comprendimos que usando
sólo Servlets o sólo JSP tendríamos
complicaciones para desarrollos 
complejos. En este capítulo haremos
una introducción a Struts, una potente
herramienta de desarrollo web.

INTRODUCCIÓN A STRUTS
EL desarrollo de aplicaciones web usando JSP o Servlets es conocido como Model 1.
Bajo este primer paradigma, accedíamos directamente a páginas o servlets, éstos procesaban información
y devolvían un resultado. 

Esta forma de desarrollo arrastra problemas tales como la mezcla de la lógica con contenido, un flujo de 
la aplicación bastante confuso, una reutilización de código que se torna dificultosa y, en definitiva, 
nos queda una aplicación difícil de mantener tanto para los programadores como para los diseñadores.

Para remediar esto se propuso usar Servlets para el control de flujo y JSP para generar el HTML resultante.
A esta conjunción de tecnologías se la conoce como Model 2. Este nuevo modelo es el resultado de una adaptación
del patrón de diseño Model-View-Controller. 

Este paradigma propone separar el modelo, la vista y el controlador en tres componentes disjuntos y desacoplados (en lo posible),
a fin de poder modificar un componente independientemente de los demás y que el resultado impacte poco o nada sobre los otros componentes.
Por ejemplo, podríamos rediseñar completamente la parte gráfica de nuestra aplicación sin tener que modificar en absoluto 
su funcionalidad subyacente: estamos modificando la vista sin necesidad de modificar el modelo o el controlador.

Antes de seguir ahondando en la utilización del paradigma, veamos con detalle cada una de las partes que lo componen.

El modelo
Son componentes que representan la información con la cuál interactúa la aplicación. Usualmente son implementados con
JavaBeans que contienen todo lo necesario para soportar la funcionalidad requerida por el sistema. Si la aplicación 
consiste en una agenda de contactos, el modelo contendrá las personas, sus relaciones, etc.

La vista
Es la representación gráfica (y generalmente interactiva) de nuestra aplicación. En nuestro caso, esta representación 
será finalmente una página HTML, pero podríamos diseñar aplicaciones que tengan varias vistas. Por ejemplo un sitio web 
accesible desde un navegador con vista HTML y accesible desde un teléfono celular con vista WML.

El controlador 
Es el encargado del control de flujo de la aplicación, responde a los eventos generados en la vista e invoca las acciones 
pertinentes (en el modelo) y devuelve el control al usuario (en la vista). 

El funcionamiento de una aplicación (web en nuestro caso, pero puede ser de cualquier tipo) bajo este paradigma es el siguiente:

(1) El usuario hace un pedido.
(2) El controlador recibe el pedido, lo analiza y decide qué acción debe ejecutar
(3) La acción se ejecuta y el modelo es modificado (o no) para ser consistente con el pedido del usuario.
(4) El controlador recibe el control de vuelta del modelo y decide qué vista activar.
(5) La vista se muestra, accediendo al modelo de ser necesario, para generarse.

Struts
Struts es un framework para el desarrollo de aplicaciones web bajo el paradigma MVC.

En esencia, Struts es simplemente un Servlet. El Servlet está configurado para responder a una serie de pedidos. 
Al invocar al servlet desde una página web, éste accede a su configuración que, según el pedido que se esté efectuando, 
redirige el control a una acción particular. Esta acción (una Clase específica) se ejecuta y finalmente llama al controlador
para que cree y devuelva la vista correspondiente. El controlador obtiene la vista que ha de mostrar (nuevamente mediante la configuración)
y la muestra. Por lo general, al ser contenido dinámico, la vista necesita acceder al modelo para obtener los datos a mostrar. 

Podemos ver que esta lógica de funcionamiento se adapta perfectamente al patrón Model-View-Controller. 

[ Servlet Struts ] ------------------------> [ struts-config.xml ]
|          |            |
[ Acción 1]|            |
    |    [ Acción 2 ]   |
    [Vista1]    |       [Acción 3]
                [Vista2]    |
                            [Vista3]        [ MODELO ]

Figura 2. La representación de componentes Struts como paradigma MVC.

Hola Struts
Veamos un ejemplo de Hola Mundo usando Struts, para luego discutir al respecto.

En la dirección https://struts.apache.org/download.cgi podemos descargar Struts. Al momento de redactar este libro,
la última versión era la 1.2.8 (actualmente 7.0.3). Hay tres distribuciones posibles de descarga:
· Binaries: contiene la distribución completa de Struts en archivos compilados, documentación y aplicaciones de ejemplo.
· Sources: contiene el código fuente de todo el framework y aplicaciones de ejemplo y documentación.
· Library: contiene solamente los archivos JAR empaquetados para ser usados en aplicaciones web.

La distribución Sources es ideal para indagar y entender el funcionamiento completo de Struts por dentro. 
A los efectos de seguimiento del libro, utilizaremos la distribución Library.

[] Instalar Struts en aplicaciones web
[1] Cree un nuevo proyecto accediendo a File / New / Project en Eclipse. Elija el tipo de proyecto Tomcat Project

[2] Copie todos los archivos de extensión JAR de la distribución de Struts en la carpeta WEB-INF/lib del proyecto.

[3] Agregue los jars al classpath accediendo a las propiedades del proyecto (botón derecho del mouse sobre el nombre del proyecto / Properties) 
y en la pestaña Libraries oprimiendo Add JARs.

[4] Seleccione todos los acrhivos bajo WEB-INF/lib y presione OK. (Apply and Close)

[5] Presione OK en el cuadro de propiedades del proyecto.

[6] Copie todos los archivos de extensión TLD de la distribución de Struts en la carpeta WEB-INF del proyecto. 

Con estos pasos ya tenemos todos los archivos de Struts necesarios para integrarlo a nuestra aplicación. 
Veamos ahora cómo configurar la aplicación para que use Struts. 

Recordemos que la configuración de una aplicación web se realizaba mediante el archivo web.xml, residente en la carpeta WEB-INF. 

Veamos un archivo web.xml básico que incluye Struts: 

Nota: ver el archivo:
E:\Users\ehv80\Documentos\Programacion_en_Lenguaje_Java\JAVA_WEB_2006\Hola Struts\WEB-INF\web.xml

"
<?xml version="1.0" encoding="ISO-8859-1"?>

<!DOCTYPE web-app
	PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.2//EN"
	"http://java.sun.com/j2ee/dtds/web-app_2_2.dtd">
	
<web-app>

	<display-name>Aplicación con Struts</display-name>
	
	<!-- Definimos el servlet con Strtus -->
	
	<servlet>
		<servlet-name>action</servlet-name>
		<servlet-class>org.apache.struts.action.ActionServlet</servlet-class>
		
		<!-- Indicamos a Struts dónde buscar el archivo de configuración -->
		<init-param>
			<param-name>config</param-name>
			<param-value>/WEB-INF/strtus-config.xml</param-value>
		</init-param>
		
		<!-- Esta directiva indica que el servlet ha de cargarse al inicializarse Tomcat -->
		<load-on-startup>2</load-on-startup>
	</servlet>
	
	<!-- Asociamos el servlet de Struts a todos los pedidos que terminen con .do -->
	<servlet-mapping>
		<servlet-name>action</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>
	
	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
	
	<!-- Descriptores de la librería de tags de Struts -->
	<taglib>
		<taglib-uri>/tags/struts-bean</taglib-uri>
		<taglib-location>/WEB-INF/strtus-bean.tld</taglib-location>
	</taglib>
	
	<taglib>
		<taglib-uri>/tags/struts-html</taglib-uri>
		<taglib-location>/WEB-INF/struts-html.tld</taglib-location>
	</taglib>
	
	<taglib>
		<taglib-uri>/tags/struts-logic</taglib-uri>
		<taglib-location>/WEB-INF/struts-logic.tld</taglib-location>
	</taglib>
	
	<taglib>
		<taglib-uri>/tags/struts-nested</taglib-uri>
		<taglib-location>/WEB-INF/struts-nested.tld</taglib-location>
	</taglib>
	
	<taglib>
		<taglib-uri>/tags/struts-tiles</taglib-uri>
		<taglib-location>/WEB-INF/struts-tiles.tld</taglib-location>
	</taglib>
	
</web-app>
"
Se define un servlet que es el controlador de Struts y se asocia todo pedido que termine con .do a ese servlet.
Tradicionalmente, las aplicaciones Struts asocian esta extensión, pero podemos definir cualquier tipo que queramos.

Notemos también que dicho servlet toma un parámetro. Este parámetro es la ubicación del archivo de configuración de Struts,
que contiene toda la información necesaria para el funcionamiento de la aplicación. Más adelante volveremos con detalles 
sobre este archivo.

Finalmente, están las declaraciones de taglibs. Struts provee una serie de tags muy útiles para usar en las páginas JSP (la vista).
Para poder usar dichos tags, los declaramos en el descriptor web. Veamos ahora un ejemplo minimalista del archivo de configuración de Struts
(struts-config.xml) que nos permitirá ejecutar Hola Mundo como aplicación web con Struts.

Nota: ver el archivo: 
E:\Users\ehv80\Documentos\Programacion_en_Lenguaje_Java\JAVA_WEB_2006\Hola Struts\WEB-INF\struts-config.xml

"
<?xml version="1.0" encoding="ISO-8859-1" ?>

<!DOCTYPE struts-config PUBLIC
	"-//Apache Software Foundation//DTD Struts Configuration 1.2//EN"
	"http://jakarta.apache.org/struts/dtds/struts-config_1_2.dtd">
	
<struts-config>
	<action-mappings>
		<!-- Acción Hola Mundo -->
		<action
			path="/holamundo"
			type="action.HolaMundoAction">
			<!-- Una posible vista de la acción -->
			<forward name="ok" path="/jsp/holamundo.jsp" />	
		</action>
	</action-mappings>
</struts-config>
"

El archivo de configuración de una aplicación completa es inmensamente más grande y complejo que éste. En esta reducida y sencilla
versión simplemente declaramos que nuestra aplicación tiene una única acción posible. La misma se activará cuando se acceda a la dirección
holamundo y la acción a ejecutarse es la que define la clase action.HolaMundoAction. A su vez, esta acción tiene una sola vista asociada, 
de nombre ok y asociada a la página JSP ubicada en /jsp/holamundo.jsp.

Unos puntos a remarcar (sin entrar aún en detalles sobre este archivo). El path o punto de acceso de la aplicación determina la dirección que
queremos asociar a la acción. Notemos que no estamos agregando la extensión .do al path, sin embargo, en el descriptor de la aplicación 
definimos que asociamos todas las direcciones que terminan con .do al servlet de Struts. Esto implica que si queremos acceder a la acción 
definida, asumiendo que estamos ejecutando Tomcat en la máquina local y que el proyecto se llama "Hola Struts", debemos acceder a la siguiente
dirección web: http://localhost:8080/Hola Struts/holamundo.do 

Veamos la implementación de la clase HolaMundoAction:

Nota: ver el archivo: 
E:\Users\ehv80\Documentos\Programacion_en_Lenguaje_Java\JAVA_WEB_2006\Hola Struts\src\HolaMundoAction.java

"
package action;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

public class HolaMundoAction extends Action 
{
	// Debemos sobreescribir el método execute
	public ActionForward execute(ActionMapping map, ActionForm form, HttpServletRequest req, HttpServletResponse res) throws Exception 
	{
		// Queremos ir a la vista de nombre "ok"
		return map.findForward("ok");
	}
}
"

Una acción que defina una clase para ser ejecutada debe referirse a una clase que extienda org.apache.struts.action.Action.
Típicamente sobreescribiremos el método execute, que es el método llamado por Struts. En el ejemplo simplemente le informamos al 
controlador que devuelva la vista de nombre ok.

A no preocuparse si esto no se entiende totalmente, simplemente estamos mostrando un pantallazo del funcionamiento de Struts, para 
luego poder proseguir con más detalle y con ejemplos más complejos.

Para terminar esta mini aplicación, nos falta la vista. Según el archivo de configuración de Struts, ésta se encuentra ubicada en 
/jsp/holamundo.jsp. Creamos la carpeta jsp y dentro creamos la página JSP: 

Nota: ver el archivo: 
E:\Users\ehv80\Documentos\Programacion_en_Lenguaje_Java\JAVA_WEB_2006\Hola Struts\jsp\holamundo.jsp

"
<%@ taglib uri="/tags/struts-bean" prefix="bean" %>

<jsp:useBean id="hm" class="model.HolaMundoBean" />

<b>
<bean:write name="hm" property="saludo" />
</b>
"

Esta página JSP declara que usaremos un conjunto de tags de Struts, instancia un JavaBean (esto es exactamente igual que en el capítulo 3)
y finalmente utiliza un tag específico de Struts para imprimir el saludo en pantalla. En este ejemplo, el tag de Struts no aporta mayor
funcionalidad a la que podríamos haber logrado usando <jsp:getProperty ... />, pero luego veremos que estos tags provistos por Struts son muy
poderosos y útiles.

Vemos que hemos instanciado un JavaBean. El código de dicho JavaBean es el siguiente: 

Nota: ver el archivo: 
E:\Users\ehv80\Documentos\Programacion_en_Lenguaje_Java\JAVA_WEB_2006\Hola Struts\src\HolaMundoBean.java

"
package model;

public class HolaMundoBean
{
	//Una propiedad
	private String saludo = "Hola Mundo con Struts";
	
	//La propiedad es de Lectura
	public String getSaludo()
	{
		return this.saludo;
	}
}
"

Simplemente, un JavaBean con una Propiedad de Tipo String y un método accesor.

Si arrancamos Tomcat y apuntamos el navegador a la dirección http://localhost:8080/Hola Struts/holamundo.do 
veremos lo siguiente
"
Hola Mundo con Struts
"

O sea, ¡después de tanto trabajo obtenemos exactamente lo mismo que hubiésemos logrado con una sola línea de JSP!

Struts no es muy eficiente para escribir aplicaciones del estilo Hola Mundo, pero prontamente veremos que, para aplicaciones
que requieren un mínimo de complejidad, aporta mucho y simplifica el desarollo.

Ahora que hemos visto un ejemplo concreto en Struts, vamos a identificar las componentes del modelo MVC.

El modelo en este caso consiste simplemente en un JavaBean (HolaMundoBean) que contiene los datos a utilizar por la aplicación.

La vista es una página JSP que no tiene funcionalidad propia, simplemente muestra los datos provistos por el modelo.

El controlador es Struts, que provee el servlet, las clases necesarias para obtener la configuración, la lógica interna, etc. 
y además la clase HolaMundoAction, encargada de definir las acciones y el flujo de nuestra aplicación. 

Utilidad de Struts
Struts nos va a ayudar mucho a desarrollar aplicaciones web. Algunas de las utilidades que provee son: 

· Desarrollo en componentes de acuerdo con el paradigma MVC, separando la lógica del contenido
· Utilidades para mapear JavaBeans con formularios (mediante ActionForms) y cargar los formularios con el contenido del JavaBean 
· Internacionalización de la presentación. En base al lenguaje del navegador, Struts automáticamente puede mostrar el contenido apropiado
· Validación. Para validar formularios enviados por el usuario, Struts provee el Validator Framework, muy útil para validaciones sin
necesidad de escribir código. También podemos crear nuestros propios validadores o definir la validación específica de los formularios,
si lo necesitamos.
· Subclases de Action. No tenemos que limitarnos a extender la clase Action para cada acción que deseemos. Struts provee varias subclases
con ciertas funcionalidades.
· Manejo de excepciones. Podemos definir manejadores de excepciones a nivel global o por acción, de esta forma, cuando ocurra una excepción 
podremos realizar acciones de contingencia, registrar lo ocurrido para depuración, etc.
· Soporte para DataSources. En el archivo de configuración podemos declarar uno o más elementos data-source para definir accesos a bases de datos y utilizarlos desde acciones o servlets
· Plugins. Podemos definir plugins que se enchufan en la aplicación para realizar diversas tareas en la inicialización o terminación de la 
misma.
· Upload de archivos. Struts provee una API sencilla para manejar casos en los que el usuario envía archivos al servidor como parte de un formulario.
·Reusabilidad de componentes de vista usando Struts Tiles.

Action y ActionForm
Si bien en los próximos capítulos analizaremos con más profundidad estos componentes, es menester aquí hacer una pequeña explicación para
poder entender el funcionamiento de Struts.

Como vimos, Action es la clase madre de las acciones que se realizan en la aplicación. Los objetos Action son un adaptador entre un pedido HTTP y la lógica que ha de efectuarse en respuesta al pedido.

Al recibir un pedido HTTP, Struts lo recibe y lo envía al Action correspondiente, proporcionando además objetos propios de Struts para
su ejecución.

La aridad es la signatura del método: qué parámetros toma y en qué orden.

Recordemos la aridad del método execute:

ActionForward execute(ActionMapping map, ActionForm form, HttpServletRequest request, HttpServletResponse response)

Una clase a destacar en esta discusión es ActionForm. Un ActionForm es un JavaBean cuyas propiedades son relacionadas
con parámetros del pedido. Al enviarse un formulario, se carga ActionForm con los valores establecidos por el usuario 
y se envía a Action para su ejecución.

Desarrollando aplicaciones con Struts
Sabiendo cómo desarrollar aplicaciones con servlets y con JSP, veamos en qué se diferencia el desarrollo al utilizar Struts.

Siguiendo con la temática del paradigma MVC, el desarrollo de aplicaciones web se reduce a escribir estos componentes.

· Model: objetos por lo general JavaBeans, aunque puedens ser objetos de cualquier tipo que contienen la información
y la lógica de lo que queremos representar

Si bien los ActionForms por lo general contienen propiedades compartidas con objetos del modelo, son componentes del controlador.

Los objetos del modelo idealmente deben estar completamente desacoplados del entorno web. Esto incrementa las chances de poder
reutilizarlos en otros entornos. En concreto, no deberíamos depender de ninguna clase específica de Struts o Servlets.

· View: la vista consiste en generar páginas HTML o crear componentes que las generen, como páginas JSP. Es importante recordar
que Struts no se limita a usar JSP como capa de presentación. ¡Ni siquiera tenemos que generar HTML como resultado! Podríamos generar
y devolver al usuario cualquier tipo de documento, si así lo quisiéramos.

· Controller: escribir estos componentes consiste en desarrollar objetos Action, ActionForm y asociarlos entre sí en el archivo de 
configuración. Los objetos ActionForm no se limitan a replicar las propiedades del formulario al cual están asociadas, sino que también
desarrollan su validación.

Los objetos Action son los encargados de procesar los pedidos e indicarle al controlador la vista a mostrar como resultado.

En los próximos capítulos vamos a conocer cada uno de estos componentes, sus posibles variantes y su interacción.

Model 2X
Al poco tiempo de popularizarse Struts en el mercado, algunas personas notaron que el paradigma MVC implementado por Struts usando JSP
como capa de presentación no terminar de aislar completamente el contenido de la presentación.

Si bien las buenas prácticas dicen que debemos usar JSP únicamente como capa de presentación y acceder al modelo para el contenido, nada
impide que escribamos código en los documentos JSP. Si esto ocurre, los beneficios del paradigma MVC se pierden, y la funcionalidad queda
esparcida entre el modelo y la vista. Si encima ejecutamos lógica en las acciones ¡tendremos funcionalidad en el modelo, la vista y el controlador!

Una alternativa planteada, llamada Model 2X, consiste en hacer que las clases Action generen documentos XML y luego éstos sean procesados
mediante transformadores como XSLT o XLS:FO. Este acercamiento separa completamente el contenido de la presentación y tiene numerosas ventajas.
