Servlets
En este capítulo veremos cómo
es en la práctica una aplicación web Java.
Aprenderemos qué es un Servlet, 
configuraremos un Servidor Tomcat
para realizar pruebas, y codificaremos
algunos ejemplos.

SERVLETS 
Según vimos en el primer capítulo, para crear una aplicación web basta con
desarollar un servidor que escuche pedidos y devuelva recursos.

Pero es claro que el desarrollo web no consiste únicamente en eso. Sun Microsystems
creó (dentro del contexto del Java Community Process, que permite a cualquier persona
del mundo participar en la toma de decisiones) la Java Servlet Technology, una
especificación que define una serie de clases, paquetes y procedimientos que se utilizan
para la creación de Servlets, la base fundamental del desarrollo web con Java.

Algo a destacar acerca de los servlets es que la tecnología Java Servlet Technology
es una especificación. Es decir que la tecnología consta solamente de un documento,
muy detallado, donde indica la funcionalidad que se provee y cómo deberá ser el 
software que la implemente, pero no proporciona ningún tipo de software en concreto.
Si bien SUN desarrolló su propia implementación, la especificación nos permite trabajar
con cualquier implementación que queramos, en tanto y en cuanto se atenga a la especificación.
Podemos decir que la especificación define un estándar que ha de cumplirse por los implementadores.

El hecho de trabajar en base a una especificación tiene muchas ventajas, pero también 
un problema: la especificación sólo define cómo debe comportarse el software, pero
no limita sus capacidades. Por lo tanto, algunos implementadores le agregan muchas 
funcionalidades a la implementación que desarrollan, de forma tal de cumplir con la 
especificación, pero además soportar sus propios requerimientos. Esto conlleva el riesgo
de que, si usamos funcionalidades extra de una implementación específica, después será
más difícil migrar a cualquier otra implementación.

¿Qué son los servlets?
Un servlet es, entonces, un componente de software Java que es encargado de generar
contenido dinámico en respuesta a pedidos HTTP. Todo servlet reside dentro de un 
servlet container, que es una parte del servidor web. El servidor web recibe los pedidos,
revisa su sintaxis y los deriva al servlet container, que a su vez determina qué servlet
debe invocarse, construye los objetos correspondientes que recibirá el servlet, envía
el pedido al servlet y éste devuelve la respuesta generada.

                _____________________________
                |   Servidor web            |
                |                           |
                |   [ Servlet Container ]   | 
--- Pedidos --->|   [ Seguridad ]           |
                |   [ Loggind ]             |
<---Respuestas--|___________________________|

Figura 1. El servlet container es un componente más dentro del servidor web.

La especificación define una interfaz servlet que define los siguientes métodos:

/* Cuando el contenedor crea el servlet (ya sea por un pedido o por
 * inicialización del servidor), llama a este método para que el servlet pueda
 * inicializar los recursos necesarios durante su vida 
 */
 void init(ServletConfig config);

/* Método llamado cuando el contenedor decide destruir el servlet. El servlet 
 * deberá liberar los recursos que tomó y ejecutar acciones sabiendo que será destruido
 */
 void destroy();

/* Devuelve el objeto de configuración del servlet */
 ServletConfig getServletConfig();

/* Método de ejecución del servlet. Dado un pedido (encapsulado por un ServletRequest)
 * y un objeto de respuesta (el objeto ServletResponse) el servlet ejecuta su lógica 
 * en este método */
 void service(ServletRequest req, ServletResponse res);

/* Devuelve una cadena con información sobre este servlet */
String getServletInfo();

Luego nos dedicaremos a los detalles, pero podemos ver que, básicamente, un servlet
se inicializa, se le efectúan pedidos y finalmente se destruye.

La especificación es lo suficientemente amplia como para soportar servlets que 
respondan a cualquier tipo de pedido. Nosotros vimos que para Internet, las 
comunicaciones se realizan mediante el protocolo HTTP. Por lo tanto, es obvio
que existen clases específicas para servlets que responde a pedidos HTTP, ya que
son los más comunes hoy en día.

            _____________________________
            | << Interfaz >>            |
            |    Servlet                |
            |___________________________|
            |___________________________|
            |___________________________|
                        ^
                        |
            ____________|________________
            | << Abstracta >>           |
            |    GenericServlet         |
            |___________________________|
            |___________________________|
            |___________________________|
                        ^
                        |
                        |
            ____________|________________
            | << Abstracta >>           |
            |    HttpServlet            |
            |___________________________|
            |___________________________|
            |___________________________|

    Figura 2. Diagrama de clases de servlets.

La clase abstracta HttpServlet define los siguientes métodos:

protected void doDelete(HttpServletRequest, HttpServletResponse);
protected void doGet(HttpServletRequest, HttpServletResponse);
protected void doHead(HttpServletRequest, HttpServletResponse);
protected void doOptions(HttpServletRequest, HttpServletResponse);
protected void doPost(HttpServletRequest, HttpServletResponse);
protected void doPut(HttpServletRequest, HttpServletResponse);
protected void doTrace(HttpServletRequest, HttpServletResponse);
protected void service(HttpServletRequest, HttpServletResponse);
void service(ServletRequest req, ServletResponse res);
protected long getLastModified(HttpServletRequest);

La clase HttpServlet, es una subclase de GenericServlet, y de ella hereda
métodos, atributos, eventos y demás propiedades.

Veamos con más detalle cómo funciona un servlet, en particular un HttpServlet.

· Un pedido HTTP llega al servidor.
· El servidor interpreta el pedido y lo reenvía al servlet container.
· EL servlet container parsea el pedido, crea los objetos correspondientes y crea o llama 
a la instancia del servlet que ha de manejarlo.
· El servlet asignado para manejar ese pedido es, asumamos, un HttpServlet.
· El servlet container invoca al método service con los objetos HttpServletRequest y HttpServletResponse
que creó como parámetros.
· El servlet inspecciona los objetos recibidos como parámetros e invoca el método correspondiente, Según
el tipo de pedido recibido.
· El método se ejecuta y la respuesta es generada.
· El servlet container envía la respuesta al cliente que originó el pedido.

                    @
                    |
                    | init()
                    |
                    |       /-->| 
                [ Iniciado ]    |service(ServletRequest req, ServletResponse res)
                    |       \-<-|
                    |
                    | destroy()
                    |
                [ Terminado ]
                    |
                    @
    
    Figura 3. Ciclo de vida de un servlet.

El tipo de pedido es uno de los que vimos en el Capítulo 1 (Tabla 1.1)
Como vemos, hay métodos definidos para manejar cualquier tipo de pedido.

¡Hola Mundo!
Veamos un ejemplo de servlet, el clásico "Hola Mundo".
    
Nota. ver el archivo: HolaMundoServlet.java 

El servlet es invocado por el contenedor de servlets del servidor, y si el pedido
es de tipo POST o GET, el servlet entonces responde con una página HTML (aunque no tenga ningún
tipo de marca HTML, no deja de ser un documento HTML) que dice "Hola Mundo!".

Este servlet no es muy útil que digamos, ya que entrega siempre la misma cadena de texto.
Aunque es ejecutado como un servicio de contenido dinámico, está devolviendo contenido estático.

Antes de pasar a un ejemplo un poco más útil, veamos en qué consisten las clases 
HttpServletRequest y HttpServletResponse. 

HttpServletRequest
Esta clase encapsula la información que contiene el pedido del cliente. La clase
se extiende a partir de ServletRequest, una clase que contiene opciones de pedidos
genéricos, y la extiende con información específica del protocolo HTTP. Un Servlet 
accede a esta clase para saber qué contenido devolver. Aunque es teóricamente posible
implementar toda la funcionalidad de un sitio web en un solo servlet, basándose en
parámetros del pedido, sería a costa de un código inmanejable, confuso y difícil 
de mantener. Para evitarlo, esta clase provee métodos para acceder a parámetros, 
encabezados, cookies y opciones de seguridad. Veamos algunos de los métodos
(tanto de la clase HttpServletRequest como de su clase padre ServletRequest)
que usaremos más seguido:

Object getAttribute(String name)
Enumeration getAttributeNames()
void removeAttribute(String name)
void setAttribute(String name, Object o)
Locale getLocale()
Enumeration getLocales()
Map getParameterMap()
Enumeration getParameterNames()
String[] getParameterValues(String name)
Cookie[] getCookies()
HttpSession getSession()
HttpSession getSession(boolean create)
String getRequestedSessionId()

Un pedido puede tener asociados objetos, llamados atributos. Estos objetos no
son asociados al pedido por el navegador web, sino por componentes en el servidor.
Más adelante veremos cuáles son los usos de estos atributos. Los métodos 
getAttribute, getAttributeNames, removeAttribute y setAttribute manipulan dichos 
atributos asociados.

Los navegadores más recientes permiten al usuario definir el idioma en que 
prefiere navegar la Web. Esto se traduce en un encabezado llamado Accept-Language
que define el o los idiomas preferidos. Si programamos nuestras aplicaciones para
que tomen en cuenta esta información, podremos mostrar al usuario páginas en su idioma,
sin interacción por parte de él. Los métodos getLocale y getLocales devuelven
el o los idiomas preferidos por el usuario, según el parámetro enviado por el navegador.

Los métodos getParameterMap, getParameterNames y getParameterValues nos permiten
interactuar con los parámetros enviados por el navegador. Estos parámetros, a diferencia
de los atributos, sí son establecidos por el navegador cuando el usuario interactúa con
la página, pulsando un enlace o enviando un formulario web.

El método getCookies nos permite obtener las cookies que este cliente tiene alojadas
en su computadora.

Y por último, los métodos getSession y getRequestedSessionId nos sirven para tener
acceso a la session a la cuál pertenece este pedido. Notemos que getRequestedSessionId es el
indicador de sesión del que hablamos en el primer capítulo, y getSession nos devuelve un objeto
HttpSession que contiene toda la información de sesión en el servidor.

HttpServletResponse
Esta interfaz define datos y métodos para manipular la información que será 
devuelta al cliente. Un servlet recibe de parámetro una instancia de este tipo de objeto
y es su tarea modificar este objeto según su funcionalidad para que luego la respuesta
le sea enviada al cliente. Veamos algunos de los métodos que usaremos de esta interfaz Y
de su superinterfaz: ServletResponse.

ServletOutputStream getOutputStream()
PrintWriter getWriter()
void addCookie(Cookie cookie)
void addHeader(String name, String value)
void setHeader(String name, String value)
boolean containsHeader(String name)
void sendRedirect(String location)

Los métodos getOutputStream() y getWriter() nos devuelven objetos en los que
podemos escribir el contenido de la respuesta. En el primer caso un OutputStream, 
útil para devolver contenido binario, y en el segundo caso un PrintWriter, apto 
para devolver texto al cliente.

Con addCookie(Cookie cookie) podemos enviarle una cookie al cliente, que luego
podremos obtener e inspeccionar. Es importante notar que el usuario podría definir
la opción de no recibir cookies en su navegador, de manera que debemos preveer
esta situación y no escribir aplicaciones que dependan del uso de ellas.

Los métodos addHeader(String name, String value) y setHeader(String name, String value)
escriben contenido en el encabezado de la respuesta. La diferencia entre estos métodos
consiste en que setHeader escribe el valor en el encabezado, pisando (si hubiere) un valor existente.
En cambio, addHeader nos permite asignar múltiples valores a una misma entrada. Para evitarlo
pisar valores, el método containsHeader(String name) nos permite saber si ya existe un valor 
asignado como encabezado para un nombre dado. Por último, sendRedirect(String location)
se utiliza para indicar al navegador que debe redirigirse a otra dirección web.

Veamos un pequeño ejemplo. Crearemos un servlet que se fije si el pedido contiene una cookie,
caso contrario, la agrega a la respuesta. Luego dependiendo de si cierto parámetro
está contenido en el pedido, responderá de distinta forma, y en el idioma en que el usuario 
lo desee.

Nota: Ver el archivo TestRequestResponse.java 

Probando los servlets
Hemos visto algunos ejemplos de servlets, pero ahora llegó el momento de verlos en acción.
Vamos a configurar un servidor web y a realizar un pedido a los servlets para verlos ejecutándose.

Para los ejemplos de este libro, vamos a utilizar las siguientes tecnologías:

· Eclipse: entorno de desarrollo, versión 3.1.1. Si bien no es necesario, todo tipo de desarrollo
se simplifica enormemente gracias a este framework.

Eclipse poco a poco se va convirtiendo en la herramienta de desarollo gráfico de facto. 
Basada en el viejo Visual Age de IBM, ahora de código abierto, es un software que emplea
plugins en los que se puede agregar funcionalidades y soporte para muchas tareas con poco esfuerzo.
De hecho, mediante el uso de plugins se puede utilizar Eclipse para desarrollo no sólo de Java,
sino también de PHP y otros lenguajes.

· Tomcat: servidor web y servlet container. Tomcat es un proyecto open source de muchísima calidad
desarrollado por Apache. Usaremos la versión 5.5.12 que al momento de redacción del libro es la última
versión estable y soporta la especificación de servlets 2.4 (que es la que seguimos en este libro). 
Es importante notar que Tomcat necesita de un JDK versión 1.5 o superior para funcionar.

Tomcat es, sin dudas, el servidor de código abierto más maduro hoy en día. Usado por una enorme cantidad
de usuarios y empresas de todo el mundo, con muchísimo soporte tanto de la comunidad como del ámbito empresarial,
tiene tanto prestigio que fue el servidor elegido por Sun para ser la implementación de referencia 
de las nuevas especificaciones de servlets y JSP que va desarrollando.

Apache Struts: Framework de desarrollo web creado por Apache. Es prácticamente un estándar en la industria,
y si bien hay varias alternativas para hacer desarrollos web, este es un framework muy completo, que
cuenta con miles de usuarios, mucho soporte y documentación.

Eclipse
Eclipse se puede bajar de https://www.eclipse.org/downloads. En este libro usaremos
la versión 3.1.1. No ahondaremos mucho sobre las características de Eclipse en sí, 
que son muchísimas, sino que simplemente explicaremos los conceptos de desarrollo web
mediante su uso. Una vez que hemos descargado Eclipse (hay versiones para Windows y Linux) 
lo instalamos, y quedará creada una carpeta en la que encontraremos el archivo ejecutable.
Eclipse no genera entradas en el registro de Windows ni crea archivos en otro lugar que no
sea la carpeta en la que se encuentra su instalación.

Componentes de la Interfaz gráfica de Eclipse:

(1) Tomcat: botones para arrancar, detener y reiniciar Tomcat. Estos botones son provistos por el
plugin Sysdeo.

(2) Ejecución: botones para correr aplicaciones, depurarlas y ejecutar aplicaciones externas.

(3) Panel: los paneles son configurables y podemos agregar y quitar cuantas ventanas queramos.
En este caso tenemos una vista de la aplicación actual.

(4) Código: vista del código fuente, usando un editor que resalta la sintaxis propia de Java.

(5) Panel: el panel inferior suele ser usado para mostrar mensajes de la aplicación. 
En este caso vemos la consola de salida de Tomcat.

(6) Vistas: estos botones permiten intercambiar las distintas vistas posibles. 
La vista Java es la más apropiada para el desarrollo de código.

Instalar Tomcat
Vamos a usar Tomcat como servidor web y servlet container. La instalación de Tomcat
es sencilla, y vamos a integrarlo con Eclipse.

Instalar Tomcat

[1] Descargue Tomcat de http://apache.mesi.com.ar/tomcat/tomcat-5/v5.5.12/bin/apache-tomcat-5.5.12.zip 
Si el enlace no funciona, busque algún otro servidor activo en la página de descargas de Tomcat 5.5:
http://tomcat.apache.org/download-55.cgi#5.5.12 

[2] Descomprima el contenido del archivo. Supongamos, a modo de ejemplo, que lo descomprime en C:\tomcat-5.5.12

[3] Para poder usar Tomcat con Eclipse, debe instalarle un plugin a Eclipse.
En la dirección http://www.sysdeo.com/eclipse/tomcatplugin podrá bajar la versión 3.1 final.
Este archivo es un Zip que contiene una carpeta llamada com.sysdeo.eclipse.tomcat_3.1.0. 
Esta carpeta es el plugin de Eclipse. Para instalarla, sólo basta copiarla (o moverla) dentro
de la carpeta plugins de Eclipse.
Ejemplo: si descomprimió Eclipse en C:\eclipse, entonces debe copiar (o mover) la carpeta del plugin
a C:\eclipse\plugins\com.sysdeo.eclipse.tomcat_3.1.0.

[4] Una vez instalado el plugin Sysdeo, solo basta iniciar (o reiniciar) Eclipse para que los cambios
tomen efecto.

Configuración y ejecución de Tomcat desde Eclipse PASO A PASO

[1] Acceda al panel de control de Eclipse yendo a Window/Preferences

[2] Seleccione la opción Tomcat en el arbol para ver las opciones del plugin.
Debe seleccionar Version 5.x como versión de Tomcat e ingresar la carpeta de Instalación de Tomcat,
por ejemplo: C:\tomcat-5.5.12

[3] Inicie la ejecución de Tomcat haciendo click en el botón correspondiente (Start Tomcat)

Una vez arrancado el servidor, por defecto estará configurado para escuchar pedidos en el puerto 8080.
Bastará con abrir un navegador y escribir la dirección http://localhost:8080 para ver a Tomcat corriendo. 

Ahora que tenemos un servlet container funcionando, vamos a ver qué tenemos que hacer para correr servlets.

